////////////////////
//Tres en Raya
////////////////////

PRESENCE.GAME.TER = (function(P,$,undefined){
  
	//Game core
	var core = P.GAME
	
  //Game variables  
  var players = null;
  var player = null;
  var currentPlayer = null;
  var options = null;
  function action(player,square) {
    this.player = player;
    this.square = square;
  }
  var playing=true;

  //Html Divs
  var divID = null;
  var containerDivId = 'tresEnRayaContainerDivID';
  var messageDivId = 'tresEnRayaMessageDivID';

  //Boardgame
  var board = [];
  var boardDimension = null;
  var squareDimension = null;
  var middleSquareDimension = null;

  var init = function(myPlayers,myPlayer,myOptions,myDivID){
    if (!validateParams(myPlayers,myPlayer,myOptions,myDivID)){
      showMessage("Invalid parameters");
      return;
    }
    players = myPlayers;
    player = myPlayer;
    options = settingOptions(myOptions);
    divID = myDivID;
    drawBoard();
    settingBoard();
    setBoardEvents();
    currentPlayer = players[0];
    if(player==currentPlayer){
      showMessage("You start!")
    } else {
      showMessage(currentPlayer + " starts!")
    }
  };

  var validateParams = function(myPlayers,myPlayer,myOptions,myDivID){
    
    if ((typeof myPlayers=="undefined")||(typeof myPlayer=="undefined")||(typeof myOptions=="undefined")||(typeof myDivID=="undefined")){
      return false;
    }

    //Check if myPlayers is an Array
    if (myPlayers.constructor.toString().indexOf("Array") == -1){
      return false;
    }

    //2 players at least
    if(myPlayers.lenght < 2){
      return false;
    }

    //Check if myOptions is an Array
    if (myOptions.constructor.toString().indexOf("Array") == -1){
      return false;
    }
    
    //Check that myPlayer is contained on myPlayers
    if(myPlayers.indexOf(myPlayer)==-1){
      return false;
    }

    return true;  
  }

  var settingOptions = function(myOptions){

    if (!('theme' in myOptions)){
      myOptions['theme'] = "Modern"
    } 

    if (!('rounds' in myOptions)){
      myOptions['rounds'] = "1"
    }

    //Apply default options for non specified opts.
    return myOptions;
  };

  var drawBoard = function(){
    var containerDiv = document.createElement('div');
    containerDiv.setAttribute('id', containerDivId);
    containerDiv.setAttribute('class', 'tresEnRayaContainerDivClass');
    $("#" + divID).append(containerDiv);

    var messageDiv = document.createElement('div');
    messageDiv.setAttribute('id', messageDivId);
    $(messageDiv).addClass('tresEnRayaMessageDivClass')
    $(messageDiv).addClass('tresEnRayaMessageTheme' + options['theme'])
    $("#" + divID).append(messageDiv);

    var p = document.createElement('p');
    p.setAttribute('id', messageDivId + "p");
    $(p).addClass('tresEnRayaMessagePTheme' + options['theme'])
    $("#" + messageDivId).append(p);
    

    //Adjust dimensions
    var parentWidth = $("#" + divID).width();
    var parentHeight = $("#" + divID).height();
    var maxDimension = 300;
    var minDimension = 100;

    var dimension = Math.min(parentWidth,parentHeight,maxDimension)
    boardDimension = Math.max(dimension,minDimension)
    
    $("#" + containerDivId).height(boardDimension)
    $("#" + containerDivId).width(boardDimension);

    //Apply Theme
    $("#" + containerDivId).addClass('tresEnRayaContainerTheme' + options['theme'])
  };

  var settingBoard = function(){
    squareDimension = boardDimension/3;
    middleSquareDimension = squareDimension/2;
    //board[squareID] = [x,y,ElementInSquare {0=none,1=circle,2=aspa}]
    board[0] = [middleSquareDimension,middleSquareDimension,0]
    board[1] = [middleSquareDimension+squareDimension,middleSquareDimension,0]
    board[2] = [boardDimension-middleSquareDimension,middleSquareDimension,0]
    board[3] = [middleSquareDimension,middleSquareDimension+squareDimension,0]
    board[4] = [middleSquareDimension+squareDimension,middleSquareDimension+squareDimension,0]
    board[5] = [boardDimension-middleSquareDimension,middleSquareDimension+squareDimension,0]
    board[6] = [middleSquareDimension,boardDimension-middleSquareDimension,0]
    board[7] = [middleSquareDimension+squareDimension,boardDimension-middleSquareDimension,0]
    board[8] = [boardDimension-middleSquareDimension,boardDimension-middleSquareDimension,0]
  };

  var setBoardEvents = function(){
    $("#" + containerDivId).click(function (event) {
      
      var offsetX = event.pageX - $("#" + containerDivId).offset().left
      var offsetY = event.pageY - $("#" + containerDivId).offset().top

      if($(event.target).is('img')){
        return;
      }

      if(currentPlayer!=player){
        //return;
      }
      square = getSquare(offsetX,offsetY)
      var actionNew = new action(currentPlayer,square);
      processAction(actionNew)
    });
  };

  var getSquare = function(x,y){
    for(var i=0; i<board.length; i++){
      if((Math.abs(x-board[i][0])<middleSquareDimension)&&(Math.abs(y-board[i][1])<middleSquareDimension)){
        return i;
      }
    }
    return 0;
  }


  var processAction = function(action){

    if(playing==false){
      return;
    }

    //Check if the action is legal
    if(!checkAction(action)){
      showMessage("Ilegal action");
      return false;
    }

    if(player==currentPlayer){
      //Notify action
      sendAction(action);
    }


    //Update logic
    updateLogic(action);

    //Update interface
    updateInterface(action);

    //Check for winner
    var winner = checkWinner()
    if(winner!=null){
      if(winner!="finish"){
        if(player==winner){
          showMessage("You have won the game")
        } else {
          showMessage(winner + " has won the game")
        }
      } else {
        showMessage("Finished game");
      }
      finishGame();
      return
    }

    nextTurn();
  }


  var showMessage = function(msg){
    $("#" + messageDivId + "p").html(msg)
  }

  var finishGame = function(){
    playing = false;
  }

  var checkAction = function(action){
    if(board[action.square][2]!=0){
      return false;
    }

    return true;
  }

  var updateLogic = function(action){
    board[action.square][2]=players.indexOf(action.player)+1;
  }

  var updateInterface = function(action){
    var img = document.createElement('img');

    if(action.player==players[0]){
      var figure = "circle";
    } else {
      var figure = "aspa";
    }

    $(img).attr("src","themes/" + options['theme'].toLowerCase() + "_" + figure + ".png");

    $("#" + containerDivId).append(img);
    $(img).addClass('tresEnRayaImgTheme' + options['theme'])
    $(img).width(squareDimension*0.8)
    $(img).height(squareDimension*0.8)
    var x = $("#" + containerDivId).offset().left
    var y = $("#" + containerDivId).offset().top
    $(img).css("top",y+board[action.square][1]-middleSquareDimension*0.8)
    $(img).css("left",x+board[action.square][0]-middleSquareDimension*0.8)
    return;
  }

  var sendAction = function(action){
    //Notify action to other players
    //[...]
    return;
  }

  var onActionReceived = function(action){
    processAction(action);
    return;
  }

  //Return winner's name if exists and null if dont exits.
  //Return "finish" when the game is blocked.
  var checkWinner = function(){
    
    //Check for finish game without winner.
    var finish=true;
    for(var i=0; i<board.length; i++){
      if(board[i][2]==0){
        finish = false;
        break;
      }
    }
    if(finish){
      return "finish";
    }

    //Check winner
    //Check if exists three squares with the same symbol consecutively

    //Check horizontal
    if((board[0][2]==board[1][2])&&(board[1][2]==board[2][2])&&(board[2][2]!=0)){
      return players[board[0][2]-1];
    }
    if((board[3][2]==board[4][2])&&(board[4][2]==board[5][2])&&(board[5][2]!=0)){
      return players[board[3][2]-1];
    }
    if((board[6][2]==board[7][2])&&(board[7][2]==board[8][2])&&(board[8][2]!=0)){
      return players[board[6][2]-1];
    }

    //Check vertical
    if((board[0][2]==board[3][2])&&(board[3][2]==board[6][2])&&(board[6][2]!=0)){
      return players[board[0][2]-1];
    }
    if((board[1][2]==board[4][2])&&(board[4][2]==board[7][2])&&(board[7][2]!=0)){
      return players[board[1][2]-1];
    }
    if((board[2][2]==board[5][2])&&(board[5][2]==board[8][2])&&(board[8][2]!=0)){
      return players[board[2][2]-1];
    }

    //Check diagonals
    if((board[0][2]==board[4][2])&&(board[4][2]==board[8][2])&&(board[8][2]!=0)){
      return players[board[0][2]-1];
    }
    if((board[6][2]==board[4][2])&&(board[4][2]==board[2][2])&&(board[2][2]!=0)){
      return players[board[6][2]-1];
    }

    return null;
  }

  var nextTurn = function(){
    var playersQuantity = players.length;
    var indexActualPlayer = players.indexOf(currentPlayer);
    if(indexActualPlayer==(playersQuantity-1)){
      currentPlayer=players[0];
    } else {
      currentPlayer=players[indexActualPlayer+1];
    }
    if(player==currentPlayer){
      showMessage("Is your turn!")
    } else {  
      showMessage(currentPlayer + " turn")
    }
  }

  var getRandomPlayer = function(){
    var playersQuantity = players.length;
    var randomIndex = Math.round(Math.random()*(players.length-1))
    return players[randomIndex]
  }

  //Getters
  var getPlayers = function(){
    return players;
  }

  var getOptions = function(){
    return options;
  }
	
	var getDummy = function(){
		return core;
	}


  return {
    init: init,
		getDummy: getDummy,
    onActionReceived: onActionReceived
  };

}) (PRESENCE, jQuery);








////////////////////
//Interface Events
////////////////////
function play(){
	$(".chat-gamesthick").css("display","block");
}

function pickGamesButton(uiElement){
  var slug = $(uiElement.element).attr("id");
  //clickGamesButton(slug);
	log("clickGamesButton(slug)" + slug)
}

