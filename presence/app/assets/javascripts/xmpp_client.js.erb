////////////////////
//Test functions
////////////////////

function log(msg) {
    //console.log(msg)
}


////////////////////
//Hash table
////////////////////
var statusMessage = new Array();
statusMessage[''] = "";
statusMessage['chat'] = "";
statusMessage['away'] = "Away";
statusMessage['xa'] = "Away";
statusMessage['dnd'] = "Busy";

var statusIcons = new Array();
statusIcons[''] = "available";
statusIcons['chat'] = "available";
statusIcons['away'] = "away";
statusIcons['xa'] = "away";
statusIcons['dnd'] = "dnd";

////////////////////
//Connect functions
////////////////////

function connectToServerWithCookie(){
    try {
      connection = new Strophe.Connection(BOSH_SERVICE);
      connection.connect(user_jid, cookie, onConnect);
    } catch (err) {
      //"Handle errors"
      return false;
    }
}

//Password: Get from chatPassword param if exists, instead try to get from sessionStorage.
function connectToServerWithPassword(chatPassword){
    
    //Get Password
    if ((chatPassword!=null)&&(chatPassword!="")){
      var password = chatPassword;
    } else if ((window.sessionStorage)&&(sessionStorage.getItem("ss_user_pass") != null)) {
      var password = sessionStorage.getItem("ss_user_pass");
    } else {
      return false;
    }
    
    try {
        //Connect actual user to the chat
        connection = new Strophe.Connection(BOSH_SERVICE);
        connection.connect(user_jid, password, onConnect);
    } catch (err) {
        //"Handle errors"
        return false;
    }

    return true;
}


////////////////////
//Reconnect button functions
////////////////////

var connectButtonTimer;
var periodBetweenAttempts=15; //(seg)
var connectButtonTimerCounter=periodBetweenAttempts;

function connectButtonTimerFunction(){
	  if(connectButtonTimerCounter < periodBetweenAttempts){
			connectButtonTimerCounter++;
		} else if (connectButtonTimerCounter == periodBetweenAttempts) {
			$("#chat_header_title").html('<%=I18n.t('chat.disconnected')%>')
		}
}

function requestConnectToChat(){
  if (connectButtonTimerCounter > (periodBetweenAttempts-1)) {
    connectButtonTimerCounter=0; 
		$("#chat_header_title").html('<%=I18n.t('chat.connecting')%>')
    return true
  } else {
    return false
  } 
}

////////////////////
//Strophe functions
////////////////////

//Global variables
var userStatus = "chat";
var awayTimerPeriod = 16000;
var timerPeriod = 5000;
var refreshMinTime = 3*timerPeriod;
var awayTime = 300000;
var awayCounter = 0;
var timerCounter = 0;
var connection = null;
var userConnected = false;
var reconnectAttempts = 3;
var awayTimer;
var timer;
var requestContacts=false;
var cyclesToRefresh = (refreshMinTime/timerPeriod);

function onConnect(status) {
	
	//Status.ERROR An error has occurred
	//Status.CONNECTING The connection is currently being made
	//Status.CONNFAIL The connection attempt failed
	//Status.AUTHENTICATING The connection is authenticating
	//Status.AUTHFAIL The authentication attempt failed
	//Status.CONNECTED  The connection has succeeded
	//Status.DISCONNECTED The connection has been terminated
	//Status.DISCONNECTING  The connection is currently being terminated
	//Status.ATTACHED The connection has been attached
	
	log('Strophe onConnect callback call with status ' + status);
	
	if (status == Strophe.Status.ATTACHED){
		log('Strophe connection attached');
		return;
	} 
	
	if (status == Strophe.Status.AUTHENTICATING ){
    log('Strophe connection AUTHENTICATING');
		return;
  }
	
	if (status == Strophe.Status.CONNECTING) {
     log('Strophe is connecting.');
		 return;
  } 
		
		
	clearTimeout(initialTimer);
		
	if (status == Strophe.Status.CONNFAIL) {
   log('Strophe failed to connect.');
   userConnected = false;
   setTimeout ("onReconnect()", 3000);
  } else if (status == Strophe.Status.AUTHFAIL) {
   log('Strophe authentication fail.');
	   if ((window.sessionStorage)&&(sessionStorage.getItem("ss_user_pass") != null)){
	    sessionStorage.setItem("ss_user_pass",null);
	   }
   userConnected = false;
  } else if (status == Strophe.Status.ERROR) {
   log('Strophe error.');
   userConnected = false;
  } else if (status == Strophe.Status.DISCONNECTED) {
   log('Strophe is disconnected.');
   userConnected = false;
	 clearTimeout(awayTimer);
   setTimeout ("onReconnect()", 3000);
  } else if (status == Strophe.Status.CONNECTED) {
   log('Strophe is connected.');
   log('Presenze stanza send for:' + connection.jid);
   connection.addHandler(onMessage, null, 'message', null, null,  null);
	 connection.addHandler(onPresence, null, 'presence', null, null,  null); 
   //addHandler:(callback, namespace to match, stanza name, stanza type, stanza id , stanza from, options)
   sendStatus(userStatus);
   userConnected = true;
   awayTimer = setInterval("awayTimerFunction()", awayTimerPeriod);
	 timer = setInterval("timerFunction()", timerPeriod);
  }
	
	updateChatWindow();
}

function onReconnect(){
	if ((connection != null)&&(!userConnected)) {
		if (reconnectAttempts>0) {
			reconnectAttempts--;
      connectToServer(null);
      setTimeout ("onReconnect()", 9000);
		} else {
			//Notify issue to Rails App Server?
		}
	}
}

function onMessage(msg) {
    var to = msg.getAttribute('to');
    var from = msg.getAttribute('from');
    var type = msg.getAttribute('type');
    var elems = msg.getElementsByTagName('body');

    if (type == "chat" && elems.length > 0) {
	
			var body = elems[0];
			var from_slug = from.split("@")[0];
			var from_name = $("#" + from_slug).attr("name");
			var from_jid = from_slug + "@" + domain;
		
		
		  if (typeof ($('div.user_presence[slug=' + from_slug + ']').attr('name')) == 'undefined') {
				//No connectionBox for this user!
		    var from_name = from_slug;
				refreshChatWindow();
		  } else {
				showConnectionBoxFromSlug(from_slug);
		    var from_name = $('div.user_presence[slug=' + from_slug + ']').attr('name');
		  }
			
			if (createChatBox(from_slug,from_name,from_jid,user_name,user_jid)) {
			} else {
        window[getChatVariableFromSlug(from_slug)].chatbox("option", "boxManager").toggleBox(true);
			}
			
			content = parseContent(Strophe.getText(body));
			//Send message to chatBox and post-message functions.					
			$("#" + from_slug).chatbox("option", "boxManager").addMsg(from_name, content);
			rotatePriority(from_slug);
			blinkTitleOnMessage(from_name);
			if (mustPlaySoundForChatWindow(window[getChatVariableFromSlug(from_slug)])){
          playSound("onMessageAudio");
      }
			
    }

    // we must return true to keep the handler alive.  
    // returning false would remove it after it finishes.
    return true;
}

///////////////////////////////////////////////////////
//Allow new features in chat msg like links, images, icons, ...
///////////////////////////////////////////////////////

var chatIcons = new Array();
chatIcons[':)'] = "face-smile.png";
chatIcons[':('] = "face-sad.png";
chatIcons['(B)'] = "beer.png";
chatIcons['(C)'] = "clock.png";
chatIcons['(P)'] = "present.png";
chatIcons[':P']= "face-raspberry.png";
chatIcons[':Z']= "face-tired.png";
chatIcons['(R)']= "rain.png";
chatIcons['(S)']= "sun.png";
chatIcons[';)']= "face-wink.png";



function parseContent(content){
	
	var html_tag_pattern=/.*\<[^>]+>.*/g
	if (html_tag_pattern.test(content)){
		content = content.replace(/>/g, "&gt;");
    content = content.replace(/</g, "&lt;");
		return "<pre>" + content + "</pre>"
	}
	
  words = content.split(" ");
  for(i=0; i<words.length; i++){
    words[i] = parseWord(words[i]);
  }

  return words.join(" "); 
}

function parseWord(word){ 
  
  //Look for empty words
  if (word.trim()==""){
		return word
	}

  //Look for simple words
	var simple_word_pattern=/^[aA-zZ0-9]+$/g
	if (simple_word_pattern.test(word)){
		return word
	}

  //Look for http urls
	var http_urls_pattern=/(http(s)?:\/\/)([aA-zZ0-9%=_&+?])+([./-][aA-zZ0-9%=_&+?]+)*[/]?/g
  http_urls = word.match(http_urls_pattern)
  if (http_urls!=null){
    url = http_urls[0]
    type = getUrlType(url);
  
    switch(type){
    case "link":
			link = buildUrlLink(url,url)
			subwords = word.split(url)
			word =  parseWord(subwords[0]) + link + parseWord(subwords[1])
      break;
    case "image":
      imageLink = buildImageLink(url);
      subwords = word.split(url)
      word =  parseWord(subwords[0]) + imageLink + parseWord(subwords[1])
			break;
    default:
    }
    return word
  }
  

  //Look for www urls
	var www_urls_pattern = /(www[.])([aA-zZ0-9%=_&+?])+([.][aA-zZ0-9%=_&+?]+)*[/]?/g
  www_urls = word.match(www_urls_pattern)
  if (www_urls!=null){
    url = www_urls[0]
    type = getUrlType(url);

    switch(type){
    case "link":
		  link = buildUrlLink("http://" + url,url)
      subwords = word.split(url)
      word =  parseWord(subwords[0]) + link + parseWord(subwords[1])
      break;
    case "image": 
			imageLink = buildImageLink("http://" + url);
			subwords = word.split(url)
      word =  parseWord(subwords[0]) + imageLink + parseWord(subwords[1])
      break;
    default:
    } 
    return word
  }

  //Look for icons: Directly replace
	var icons_a_pattern=/\(([A-Z])+\)/g
	var icons_b_pattern=/(:|;)([()A-Z])(.)*/g
	if (((icons_a_pattern.test(word))) || (icons_b_pattern.test(word))) { 
  	for (var i in chatIcons) {
  		word = word.replace(buildRegex(i), buildIconImage(i))
  	}
  }
	
  //Look for icons with Regex
//	var icons_a_pattern=/\(([A-Z])+\)/g
//  if (icons_a_pattern.test(word)){
//    icon = word.replace(/[^(]*(\([A-Z]+\))(\([A-Z]+\))?(.)*/g, "$1")
//    subwords = splitFirst(word,icon)
//    image = buildIconImage(icon);
//    return subwords[0] + image + subwords[1];
//  }

//	var icons_b_pattern=/:([()A-Z])(.)*/g
//  if (icons_b_pattern.test(word)){
//    icon = word.replace(/[aA-zZ]*(:[()A-Z])(.)*/g, "$1")
//    subwords = splitFirst(word,icon)
//		image = buildIconImage(icon);
//		return subwords[0] + image + subwords[1];
    //return parseWord(subwords[0]) + image + parseWord(subwords[1]);
//  }
  
	
  //No special content detected
  return word
}

function splitFirst(word,key){
    split=[]  
    cut = word.split(key);   
    split[0]=cut[0]
    cut.shift()
    paste = cut.join(key)
    split[1]=paste
    return split
}

function buildIconImage(icon){
  if (icon in chatIcons){
    image_file = chatIcons[icon]
		image = "<img class=\"chatIcon\" src=\"assets/emoticons/" + image_file + "\"/>";
		return image
  }
  return icon
}

function buildUrlLink(url,name){
  link = "<a target=\"_blank\" class=\"chatLink\" href=\"" + url + "\">" + name + "</a>";
	return link
}

function buildImageLink(url){
  link = "<a target=\"_blank\" class=\"chatImageLink\" href=\"" + url + "\">" + "<img class=\"chatImage\" src=\"" + url + "\"/>" + "</a>";
  return link
}


function buildRegex(word){
	word = word.replace(")","\\)")
	word = word.replace("(","\\(")
  pattern = "(" + word + ")";
  pattern = buildPattern(pattern)
  return (new RegExp(pattern,'g'));
}

function buildPattern(pattern){
	//Escape pattern special characters
  pattern = pattern.replace("+","\\+")
  pattern = pattern.replace("?","\\?")
  return pattern
}

function getUrlType(url){
  urlArray = url.split(".");
  if (urlArray!=null && urlArray.length>0){
    extension= urlArray[urlArray.length-1]
  } else {
    extension = null;
  }

  switch(extension){
  case "jpg":
    return "image"
    break;
  case "png":
    return "image"
    break;
	case "gif":
    return "image"
    break;
  default:
    return "link"
  }
}



function onPresence(presence) {
	 
	  //Check presence stanza type
		ptype = $(presence).attr('type');
				
		switch (ptype){
			case undefined:
			 processAvailablePresenceStanza(presence)
			 break;
			case "available":
			  processAvailablePresenceStanza(presence)
        break;
			case "unavailable":
        processUnavailablePresenceStanza(presence)
        break;
			default : 
			  //Stanza type not recognize
				processAvailablePresenceStanza(presence)
		}
				  
	return true;
} 

function processAvailablePresenceStanza(presence){
	from = $(presence).attr('from');
  slug = from.split("@")[0];
	
	if (slug != user_slug) {
		if (getConnectionBoxFromSlug(slug)!=null){
			status = $(presence).find('show').text(); 
      setUserIconStatus(slug, status);
			if (cacheConnectedUsers.indexOf(slug) != -1) {
	  	  showConnectionBoxFromSlug(slug);
	    }	
	  } else {
	    setTimeout("refreshChatWindow()", 3000);
	  }
  }		
}

function processUnavailablePresenceStanza(presence){
	from = $(presence).attr('from');
  slug = from.split("@")[0];
	
	if (slug != user_slug) {
	  if (getConnectionBoxFromSlug(slug)!=null){
	    hideConnectionBoxFromSlug(slug)
	  }
  }
}

function sendChatMessage(from,to,text){
    var type = "chat";
    var body= $build("body");
    body.t(text);
    var message = $msg({to: to, from: from, type: 'chat'}).cnode(body.tree());
    connection.send(message.tree());	  	
		resumeAwayTimerIfAway();
		return true;
}

function authByCookie(){
	var authMethod = '<%= SocialStream::Presence.auth_method %>';
	return authMethod=="cookie";
}

function authByPassword(){
  var authMethod = '<%= SocialStream::Presence.auth_method %>';
  return authMethod=="password";
}

function ifCookie(){
	return (!(typeof cookie == 'undefined'))
}

////////////////////
//Audio functions
////////////////////

//Global audio variables
var onMessageAudio;

var html5_audiotypes=[
  ["mp3","audio/mpeg"],
  //["mp4","audio/mp4"],
  //["ogg","audio/ogg"],
  ["wav","audio/wav"]
]

function initAudio(){
	//Init all audio files
	initSound("onMessageAudio");
}

function initSound(sound){
	
	//Check support for HTML5 audio
  var html5audio=document.createElement('audio')
	
	if (html5audio.canPlayType){ 
    path = 'assets/chat/' + sound;
    window[sound] = new Audio();

    for(i=0; i<html5_audiotypes.length; i++){
      if (window[sound].canPlayType(html5_audiotypes[i][1])) {
        var source= document.createElement('source');
        source.type= html5_audiotypes[i][1];
        source.src= path + '.' + html5_audiotypes[i][0];
        window[sound].addEventListener('ended', endSoundListener);
        window[sound].appendChild(source);
      } 
    }
  } else {
    //Browser doesn't support HTML5 audio
  }
}

function endSoundListener(){ }

function playSound(sound){
	if (window[sound]!=null){
		window[sound].play();
	} else {
		//Fallback option: When browser doesn't support HTML5 audio
		$('body').append('<embed src="/' + sound + '.mp3" autostart="true" hidden="true" loop="false">');
	}
}

function initAndPlaySound(sound){
    initSound(sound);
		playSound(sound);
}



////////////////////
//Chat view jquery
////////////////////

function setUserFunctions(){
	
	$("div.user_presence").click(function(event, ui){
	  var guest_name = $(this).attr("name");
	  var guest_slug = $(this).attr("slug");
	  var guest_jid = guest_slug + "@" + domain;
	  
	  if (createChatBox(guest_slug, guest_name, guest_jid, user_name, user_jid)) {
	  } else {
	    window[getChatVariableFromSlug(guest_slug)].chatbox("option", "boxManager").toggleBox(true);
	  };
	});
	
	//JQuery DropdwanStatus
	
	$(".dropdown dt a").click(function(event) {
	 	event.preventDefault();
    $(".dropdown dd ul").toggle();
  });
          
  $(".dropdown dd ul li a.option").click(function(event) { 
	  event.preventDefault();
		var text = $(this).html();
    $(".dropdown dt a span").html(text);
    userStatus = getSelectedValue("status");
    sendStatus(userStatus);
		$(".dropdown dd ul").hide();
  });
  
       
  function getSelectedValue(id) {
    return $("#" + id).find("dt a span.value").html();
  }
  
  $(document).bind('click', function(e) {
    var $clicked = $(e.target);
    if (! $clicked.parents().hasClass("dropdown")){
      //Click outside the select...
        $(".dropdown dd ul").hide();
    }
  });
}


function awayTimerFunction(){
	  awayCounter++;
	  if (awayCounter > (awayTime/awayTimerPeriod)){
	    userStatus = "away";
			sendStatus(userStatus);
			clearTimeout(awayTimer);
	  } else {
	    userStatus = "chat";
	  }
}

function resumeAwayTimerIfAway(){
	  if (userStatus == "away"){
			awayCounter = 0;
			userStatus = "chat";
			sendStatus(userStatus);
			awayTimer = setInterval("awayTimerFunction()", awayTimerPeriod);
		}
}

function timerFunction(){
    timerCounter++;	
		
    if((timerCounter > cyclesToRefresh)&&(requestContacts)) {
        requestContacts = false;
        updateChatWindow();
	  }
}

function refreshChatWindow(){  
		if(timerCounter > cyclesToRefresh){
			updateChatWindow();
		} else {
			requestContacts = true;
		}
}

function updateChatWindow(){
	timerCounter=0;
	log("updateChatWindow()");
  $.post("/chatWindow", { userConnected: userConnected }, function(data){
			$(".tooltip").hide() //Prevent tooltips
      $("#chat_partial").html(data);
      if (userConnected) {
        $(".user_presence a[title]").tooltip();
        setUserFunctions();
      }
  });
}

function sendStatus(status){
    if (status in statusMessage){
	    //Send status to the XMPP Server
	    var pres = $pres()
	    .c('status')
	    .t(statusMessage[status]).up() //Status message
	    .c('show')
	    .t(status);
	     connection.send(pres.tree());
    }
}


function mustPlaySoundForChatWindow(chatBox){
	//Deny conditions
	if(userStatus == "dnd"){
		return false;
	}
	
	//Accept conditions
	if (!chatFocus){
		return true;
	}
	
	//Default action
	return false
}


var chatFocus;

function onChatBlur() {
  chatFocus = false;
};

function onChatFocus(){
  stopBlink();
	titles = []; //Remove titles after StopBlink!
  chatFocus = true;
};

function initFocusListeners(){
	if (/*@cc_on!@*/false) { // check for Internet Explorer
    document.onfocusin = onFocus;
    document.onfocusout = onBlur;
  } else {
    window.onfocus = onChatFocus;
    window.onblur =  onChatBlur;
  }
}


var blinkTimer;
var titles=[];

function blinkTitle(titles,index){
  $(document).attr("title", titles[index]);
  index = (index+1)%titles.length
  blinkTimer=setTimeout(function(){blinkTitle(titles,index)}, 2000);
}

function stopBlink(){
  clearTimeout(blinkTimer);
	if (titles.length > 0) {
  	$(document).attr("title", titles[0]);
  }
}

function blinkTitleOnMessage(username){
  if (!chatFocus){
    if (titles.length==0){
      titles.push($(document).attr("title"))
    }
    if (titles.indexOf(username) == -1){
      titles.push(username + " says...")
    }
    stopBlink();
    blinkTitle(titles,titles.length-1);
  }
}

function getConnectionBoxFromSlug(slug){
	if ($('div.user_presence[slug=' + slug + ']').length > 0){
		return ($('div.user_presence[slug=' + slug + ']'))[0];
	}  else {
		return null;
	}
}


var cacheConnectedUsers = [];
function hideConnectionBoxFromSlug(slug){
  if ($('div.user_presence[slug=' + slug + ']').length > 0){
    $('div.user_presence[slug=' + slug + ']').hide();
		if(cacheConnectedUsers.indexOf(slug)==-1){
		  cacheConnectedUsers.push(slug);
		}
  }
}

function showConnectionBoxFromSlug(slug){
  if ($('div.user_presence[slug=' + slug + ']').length > 0){
		if (!($('div.user_presence[slug=' + slug + ']').is(":visible"))){
			 $('div.user_presence[slug=' + slug + ']').show();
		}
  }
}

function setUserIconStatus(slug, status){
	 if (status in statusIcons) {
   	 iconName = statusIcons[status];
		 var $img_status = $('img.presence_status');
		 connectionBox = getConnectionBoxFromSlug(slug);
     $(connectionBox).find($img_status).attr("src", "/assets/status/" + iconName + ".png")
   }
}

function getAllConnectedSlugs(){
	connectedSlugs=[];
  connectionBoxes = $('div.user_presence[slug]');
	$.each(connectionBoxes, function(index, value) {
	    if($(value).is(":visible")){
	        connectedSlugs.push($(value).attr("slug"))
	    }
	});
  return connectedSlugs
}


////////////////////
//Chat functions
////////////////////

var nBox = 0;
var maxBox = 5;
var chatBoxWidth = 230;
var visibleChatBoxes = new Array();
var chatBoxSeparation = chatBoxWidth+12;


function createChatBox(guest_slug,guest_name,guest_jid,user_name,user_jid){
		
		//Create chatbox for new conversations
		//Open chatbox for old conversations
			
		//Box Variable name = getChatVariableFromSlug(guest_slug)
    if (typeof window[getChatVariableFromSlug(guest_slug)] == 'undefined') {
			
          //Add div with id = guest_slug
          $("#chat_divs").append("<div id=" + guest_slug + " name=" + guest_name + "></div>")
					
					//Add CSS [...]
          
					
					//Offset Management for new box
					boxParams = getBoxParams();
					var offset = boxParams[0];
					var position = boxParams[1];
					
	
          window[getChatVariableFromSlug(guest_slug)] = $("#" + guest_slug).chatbox({id: user_name, 
                              user:{key : "value"},
															hidden: false,
															offset: offset, // relative to right edge of the browser window
                              width: chatBoxWidth, // width of the chatbox
                              title : guest_name,
															position: position,
															priority: visibleChatBoxes.length+1,
															boxClosed: function(id) {
                                
																position = $("#" + guest_slug).chatbox("option", "position");
																
																for (i=position+1;i<visibleChatBoxes.length+1;i++){
																	visibleChatBoxes[i-1].chatbox("option", "offset", visibleChatBoxes[i-1].chatbox("option", "offset") - chatBoxSeparation);
																	visibleChatBoxes[i-1].chatbox("option", "position", visibleChatBoxes[i-1].chatbox("option", "position") - 1 );
                                }
																
																visibleChatBoxes.splice(position-1,1);
																$("#" + guest_slug).chatbox("option", "hidden", true);
																nBox--;
															},
															
                              messageSent : function(id, user, msg) {
																  rotatePriority(guest_slug);
                                  $("#" + guest_slug).chatbox("option", "boxManager").addMsg(id, parseContent(msg));
                                  sendChatMessage(user_jid,guest_jid,msg);
                              }});
															
					visibleChatBoxes[position-1] = window[getChatVariableFromSlug(guest_slug)];				
															
		      return true;
					
    } else {
			
			    if (visibleChatBoxes.indexOf(window[getChatVariableFromSlug(guest_slug)]) == -1) {
						
						//Offset Management for old box
						boxParams = getBoxParams();
            var offset = boxParams[0];
            var position = boxParams[1];
		
            window[getChatVariableFromSlug(guest_slug)].chatbox("option", "offset", offset);
            window[getChatVariableFromSlug(guest_slug)].chatbox("option", "position", position);
            visibleChatBoxes[position-1] = window[getChatVariableFromSlug(guest_slug)];
					}  
					
					window[getChatVariableFromSlug(guest_slug)].chatbox("option", "hidden", false);
			    return false;
		}
		
}

function getBoxParams(){
	
	var boxParams = new Array(2);
	
		if (nBox==maxBox){
			//Select box to replaced
			replaced = visibleChatBoxes[getBoxIndexToReplace()];           
			replaced.chatbox("option", "hidden", true)
			index = visibleChatBoxes.indexOf(replaced);
			boxParams[0] = replaced.chatbox("option", "offset")
			boxParams[1] = replaced.chatbox("option", "position")
		} else {
		  nBox++;
		  boxParams[0] = (nBox-1)*(chatBoxSeparation);
		  boxParams[1] = nBox;
		}
		
		return boxParams
}


function getBoxIndexToReplace(){

	tmp = visibleChatBoxes[0];
	for (i=0;i<visibleChatBoxes.length;i++){
    if (visibleChatBoxes[i].chatbox("option", "priority") > tmp.chatbox("option", "priority")) {
			tmp = visibleChatBoxes[i];
	  }
  }
	
	return visibleChatBoxes.indexOf(tmp);
}

function rotatePriority(guest_slug){
	priority = $("#" + guest_slug).chatbox("option", "priority")
	if(priority>1){		
			for (i=0;i<visibleChatBoxes.length;i++){
        if(visibleChatBoxes[i].chatbox("option", "priority")<priority){
					visibleChatBoxes[i].chatbox("option", "priority",visibleChatBoxes[i].chatbox("option", "priority")+1);
				}
      }		
			$("#" + guest_slug).chatbox("option", "priority", 1);		
	}	
}

function getChatVariableFromSlug(slug){
	return "slug_" + slug;
}

function getSlugFromChatVariable(variable){
	return variable.split("_")[1];
}
